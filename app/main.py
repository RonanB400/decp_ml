import streamlit as st
from streamlit_option_menu import option_menu
import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configuration de la page
st.set_page_config(
    page_title="üßæ Analyse des march√©s publics DECP",
    page_icon="üßæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS pour le style
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1f77b4;
        padding: 1rem 0;
        border-bottom: 2px solid #e0e0e0;
        margin-bottom: 2rem;
    }
    .module-card {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #1f77b4;
        margin: 1rem 0;
    }
    .metric-card {
        background: linear-gradient(45deg, #1f77b4, #17a2b8);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

def main():
    # En-t√™te principal
    st.markdown("""
    <div class="main-header">
        <h1>üßæ Analyse des march√©s publics et d√©tection d'anomalies</h1>
        <p><strong>Projet de Data Science ‚Äì Bootcamp Le Wagon, Batch #1992</strong></p>
        <p>üë• √âquipe de 4 personnes ‚Äì en collaboration avec <strong>Anticor</strong></p>
    </div>
    """, unsafe_allow_html=True)
    
    # Menu de navigation
    with st.sidebar:
        st.image("assets/logo.png" if os.path.exists("assets/logo.png") else "https://via.placeholder.com/200x100/1f77b4/white?text=DECP+ML", width=200)
        
        selected = option_menu(
            "Navigation",
            ["üè† Accueil", "üìä Estimation", "üîç March√©s similaires", "‚ö†Ô∏è Anomalies", "ü§ñ Chatbot RAG"],
            icons=['house', 'bar-chart', 'search', 'exclamation-triangle', 'robot'],
            menu_icon="cast",
            default_index=0,
            styles={
                "container": {"padding": "0!important", "background-color": "#fafafa"},
                "icon": {"color": "#1f77b4", "font-size": "18px"}, 
                "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#eee"},
                "nav-link-selected": {"background-color": "#1f77b4"},
            }
        )
    
    # Navigation vers les diff√©rentes pages
    if selected == "üè† Accueil":
        show_home()
    elif selected == "üìä Estimation":
        show_estimation()
    elif selected == "üîç March√©s similaires":
        show_clustering()
    elif selected == "‚ö†Ô∏è Anomalies":
        show_anomalies()
    elif selected == "ü§ñ Chatbot RAG":
        show_rag()

def show_home():
    """Page d'accueil avec pr√©sentation du projet"""
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        <div class="module-card">
            <h2>üéØ Objectifs du projet</h2>
            <ul>
                <li><strong>Renforcer la transparence</strong> dans la commande publique</li>
                <li><strong>Aider les collectivit√©s</strong> √† mieux estimer les montants de leurs futurs march√©s</li>
                <li><strong>Identifier les comportements atypiques</strong> dans les donn√©es ouvertes des march√©s publics</li>
                <li><strong>Faciliter l'exploration</strong> des donn√©es via un chatbot RAG</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="module-card">
            <h2>üîß Modules disponibles</h2>
            <p><strong>üìä Estimation des montants</strong> : Pr√©diction de fourchettes de montants pour de nouveaux march√©s</p>
            <p><strong>üîç March√©s similaires</strong> : Recherche des 10 march√©s les plus proches d'un march√© donn√©</p>
            <p><strong>‚ö†Ô∏è D√©tection d'anomalies</strong> : Identification des march√©s atypiques ou suspects</p>
            <p><strong>ü§ñ Chatbot RAG</strong> : Exploration conversationnelle de la base de donn√©es</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h3>üìä Statistiques</h3>
            <p>Chargement des donn√©es en cours...</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="module-card">
            <h3>ü§ù Partenariat</h3>
            <p>Ce projet est d√©velopp√© en collaboration avec <strong>Anticor</strong>, 
            association de lutte contre la corruption.</p>
        </div>
        """, unsafe_allow_html=True)

def show_estimation():
    """Module d'estimation des montants"""
    st.header("üìä Estimation des montants de march√©")
    
    st.info("üöß Module en cours de d√©veloppement - Personne 1")
    
    with st.expander("‚ÑπÔ∏è √Ä propos de ce module"):
        st.markdown("""
        **Objectif** : Pr√©dire une tranche r√©aliste de montant pour un nouveau march√© public
        
        **Approche** :
        - Transformation en probl√®me de classification (fourchettes de montant)
        - Feature engineering sur CPV, proc√©dure, localisation, acheteur
        - Mod√®les : XGBoost, Random Forest, SVM
        """)
    
    # Interface utilisateur pour la pr√©diction
    st.subheader("üîÆ Pr√©dire le montant d'un march√©")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.text_input("Intitul√© du march√©", placeholder="Ex: Fourniture de mat√©riel informatique")
        st.text_area("Description d√©taill√©e", placeholder="Description du march√©...")
        st.selectbox("Code CPV", ["48000000 - Progiciels et syst√®mes d'information", 
                                  "45000000 - Travaux de construction", 
                                  "50000000 - Services de r√©paration"])
    
    with col2:
        st.selectbox("Type de proc√©dure", ["Appel d'offres ouvert", "Proc√©dure adapt√©e", "March√© n√©goci√©"])
        st.selectbox("Type d'acheteur", ["Commune", "D√©partement", "R√©gion", "√âtat"])
        st.selectbox("Localisation", ["Paris (75)", "Lyon (69)", "Marseille (13)"])
    
    if st.button("üîç Estimer le montant", type="primary"):
        st.success("Fourchette estim√©e : **90 000‚Ç¨ - 220 000‚Ç¨** (Proc√©dure formalis√©e europ√©enne)")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Montant minimum", "90 000‚Ç¨")
        with col2:
            st.metric("Montant m√©dian", "155 000‚Ç¨")
        with col3:
            st.metric("Montant maximum", "220 000‚Ç¨")

def show_clustering():
    """Module de recherche de march√©s similaires"""
    st.header("üîç Recherche de march√©s similaires")
    
    st.info("üöß Module en cours de d√©veloppement - Personne 2")
    
    with st.expander("‚ÑπÔ∏è √Ä propos de ce module"):
        st.markdown("""
        **Objectif** : Trouver les 10 march√©s pass√©s les plus proches d'un march√© donn√©
        
        **Approche** :
        - Vectorisation TF-IDF des descriptions + features num√©riques
        - Clustering (KMeans, DBSCAN) 
        - Recherche de proximit√© (NearestNeighbors)
        """)

def show_anomalies():
    """Module de d√©tection d'anomalies"""
    st.header("‚ö†Ô∏è D√©tection d'anomalies")
    
    st.info("üöß Module en cours de d√©veloppement - Personnes 3 & 4")
    
    with st.expander("‚ÑπÔ∏è √Ä propos de ce module"):
        st.markdown("""
        **Objectif** : Rep√©rer les march√©s anormaux (montants suspects, comportements hors normes)
        
        **M√©thodes** :
        - **Isolation Forest** : analyse non supervis√©e pour rep√©rer les points rares
        - **DBSCAN** : identifie les march√©s hors des clusters denses
        - **GNN** : analyse des relations acheteurs-fournisseurs comme un graphe
        - **Visualisation** avec UMAP, t-SNE
        """)

def show_rag():
    """Module RAG pour l'exploration conversationnelle"""
    st.header("ü§ñ Chatbot RAG - Exploration conversationnelle")
    
    st.info("üöß Module optionnel en cours de d√©veloppement")
    
    with st.expander("‚ÑπÔ∏è √Ä propos de ce module"):
        st.markdown("""
        **Objectif** : Permettre des questions en langage naturel sur la base DECP
        
        **Technologies** : LangChain, FAISS, embeddings open-source
        
        **Exemples de requ√™tes** :
        - "Quels sont les march√©s de cybers√©curit√© pass√©s en 2023 dans le 69 ?"
        - "Montrez-moi les march√©s suspects d√©tect√©s cette ann√©e"
        """)
    
    # Interface de chat simul√©e
    st.text_input("üí¨ Posez votre question sur les march√©s publics", 
                  placeholder="Ex: Quels sont les plus gros march√©s de travaux en 2023 ?")
    
    if st.button("üöÄ Poser la question"):
        st.chat_message("user").write("Quels sont les plus gros march√©s de travaux en 2023 ?")
        st.chat_message("assistant").write("üöß Fonctionnalit√© en cours de d√©veloppement...")

if __name__ == "__main__":
    main() 